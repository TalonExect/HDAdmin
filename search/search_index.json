{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HD Admin Docs \u00b6 Coming soon","title":"Test"},{"location":"#welcome-to-hd-admin-docs","text":"Coming soon","title":"Welcome to HD Admin Docs"},{"location":"about/","text":"Coming soon \u00b6 Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Modules"},{"location":"about/#coming-soon","text":"Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Coming soon"},{"location":"projects/datastoreplus/about/","text":"DataStore+ \u00b6 Coming soon","title":"About"},{"location":"projects/datastoreplus/about/#datastore","text":"Coming soon","title":"DataStore+"},{"location":"projects/datastoreplus/tablemodifiers/","text":"DataStore+ \u00b6","title":"TableModifiers"},{"location":"projects/datastoreplus/tablemodifiers/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/user/","text":"DataStore+ \u00b6","title":"User"},{"location":"projects/datastoreplus/user/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/userservice/","text":"DataStore+ \u00b6","title":"UserService"},{"location":"projects/datastoreplus/userservice/#datastore","text":"","title":"DataStore+"},{"location":"projects/topbarplus/about/","text":"Topbar+ is a lightweight application that expands upon Roblox's topbar to give you greater control and customisability. Create additional icons and themes with ease; utilise a once underused space. Resources \u00b6 Repository MainModule Playground Thread Collaborate \u00b6 Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository. Referencing \u00b6 After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\") Example \u00b6 In a Script within ServerScriptService : require ( 4874365424 ) -- Initiate Topbar+ In a LocalScript within StarterPlayerScripts : -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) gui . ResetOnSpawn = false local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . AnchorPoint = Vector2 . new ( 0.5 , 0.5 ) shop . Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification Warning The topbar client (local script) has to go within StarterPlayerScripts or a ScreenGui that has \u2018ResetOnSpawn\u2019 set to false, otherwise it won\u2019t persist when the player respawns. Warning Likewise, if using a 'toggle menu', you must ensure its ScreenGui has ResetOnSpawn set to false , or that you are calling Icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist. Tips \u00b6 A tip is a label containing a short message that appears when an icon is highlighted on computer and console. To apply a tip, simply do: icon : setTip ( message ) To remove a tip, set its message to \"\" or nil : icon : setTip ( nil ) To apply a specific message for controller mode, do: icon : setControllerTip ( message ) To test controller mode on PC, simply plug-in a controller and press the console icon that pops up to the right of the topbar. Dropdowns \u00b6 A dropdown is a collection of 'options' that appear when an icon is right-clicked on PC or long-pressed on mobile: icon : createDropdown ({ { name = \"About\" , icon = \"rbxassetid://2746077483\" , clicked = function () print ( \"Navigate to About\" ) end , events = {} }, { name = \"Commands\" , icon = \"rbxassetid://2746074974\" , clicked = function () icon : select () end , events = { icon . selected } }, { name = \"Roles\" , icon = \"rbxassetid://2746105644\" , clicked = function () print ( \"Navigate to Roles\" ) end , events = {} }, { name = \"Settings\" , icon = \"rbxassetid://2746112353\" , clicked = function () print ( \"Navigate to Settings\" ) end , events = {} }, }) For more information on creating and utilising a dropdown, see Icon:createDropdown() . Themes \u00b6 Themes are easily adaptable tables of information that can be applied to icons to enhance their appearance and behaviour. You can break down a theme into three sections: The appearance of the icon when 'selected' (i.e. objectName.selected ) The appearance of the icon when 'deselected' (i.e. objectName.deselected ) How the icon transitions between these appearances when toggled (i.e. toggleTweenInfo ) An 'object' is simply a gui component that makes up the icon, such as the icons background (an ImageButton), its image (an ImageLabel), its notification background, etc. You can view the names and description of these here . For example, to make an icon have a blue background, we simply say 'I want the icon to look blue (i.e. Color3.fromRGB(0, 170, 255) ) when it's selected and deselected': [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, If a property is not specified for a 'toggle state' (i.e. the selected and deselected dictionaries), then it's automatically filled in with the default topbar properties. You then apply this theme by doing: icon : setTheme ( theme ) A theme can be applied to all icons at once by doing: IconController : setGameTheme ( theme ) or local icons = IconController : getAllIcons () for _ , icon in pairs ( icons ) do icon : setTheme ( theme ) end For further details, visit the Icon docs. Here's some examples of custom themes you can create: Roblox Mimic \u00b6 View local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, } Blue Gradient \u00b6 View local selectedColor = Color3 . fromRGB ( 0 , 170 , 255 ) local selectedColorDarker = Color3 . fromRGB ( 0 , 120 , 180 ) local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.1 , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ) --selectedColor, }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = selectedColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = selectedColor , }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"gradient\" ] = { selected = { Color = ColorSequence . new ( selectedColor , selectedColorDarker ), Rotation = 90 , }, }, } iconController : setGameTheme ( theme ) Rainbow Pop \u00b6 View local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end Mint \u00b6 by ViniDalvino View local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quart , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.35 , ImageColor3 = Color3 . fromRGB ( 0 , 255 , 200 ), }, deselected = { ImageTransparency = 0.35 , ImageColor3 = Color3 . fromRGB ( 15 , 15 , 15 ) }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 70 , 133 , 107 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 55 , 145 , 103 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, }","title":"About"},{"location":"projects/topbarplus/about/#resources","text":"Repository MainModule Playground Thread","title":"Resources"},{"location":"projects/topbarplus/about/#collaborate","text":"Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository.","title":"Collaborate"},{"location":"projects/topbarplus/about/#referencing","text":"After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\")","title":"Referencing"},{"location":"projects/topbarplus/about/#example","text":"In a Script within ServerScriptService : require ( 4874365424 ) -- Initiate Topbar+ In a LocalScript within StarterPlayerScripts : -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) gui . ResetOnSpawn = false local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . AnchorPoint = Vector2 . new ( 0.5 , 0.5 ) shop . Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification Warning The topbar client (local script) has to go within StarterPlayerScripts or a ScreenGui that has \u2018ResetOnSpawn\u2019 set to false, otherwise it won\u2019t persist when the player respawns. Warning Likewise, if using a 'toggle menu', you must ensure its ScreenGui has ResetOnSpawn set to false , or that you are calling Icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist.","title":"Example"},{"location":"projects/topbarplus/about/#tips","text":"A tip is a label containing a short message that appears when an icon is highlighted on computer and console. To apply a tip, simply do: icon : setTip ( message ) To remove a tip, set its message to \"\" or nil : icon : setTip ( nil ) To apply a specific message for controller mode, do: icon : setControllerTip ( message ) To test controller mode on PC, simply plug-in a controller and press the console icon that pops up to the right of the topbar.","title":"Tips"},{"location":"projects/topbarplus/about/#dropdowns","text":"A dropdown is a collection of 'options' that appear when an icon is right-clicked on PC or long-pressed on mobile: icon : createDropdown ({ { name = \"About\" , icon = \"rbxassetid://2746077483\" , clicked = function () print ( \"Navigate to About\" ) end , events = {} }, { name = \"Commands\" , icon = \"rbxassetid://2746074974\" , clicked = function () icon : select () end , events = { icon . selected } }, { name = \"Roles\" , icon = \"rbxassetid://2746105644\" , clicked = function () print ( \"Navigate to Roles\" ) end , events = {} }, { name = \"Settings\" , icon = \"rbxassetid://2746112353\" , clicked = function () print ( \"Navigate to Settings\" ) end , events = {} }, }) For more information on creating and utilising a dropdown, see Icon:createDropdown() .","title":"Dropdowns"},{"location":"projects/topbarplus/about/#themes","text":"Themes are easily adaptable tables of information that can be applied to icons to enhance their appearance and behaviour. You can break down a theme into three sections: The appearance of the icon when 'selected' (i.e. objectName.selected ) The appearance of the icon when 'deselected' (i.e. objectName.deselected ) How the icon transitions between these appearances when toggled (i.e. toggleTweenInfo ) An 'object' is simply a gui component that makes up the icon, such as the icons background (an ImageButton), its image (an ImageLabel), its notification background, etc. You can view the names and description of these here . For example, to make an icon have a blue background, we simply say 'I want the icon to look blue (i.e. Color3.fromRGB(0, 170, 255) ) when it's selected and deselected': [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, If a property is not specified for a 'toggle state' (i.e. the selected and deselected dictionaries), then it's automatically filled in with the default topbar properties. You then apply this theme by doing: icon : setTheme ( theme ) A theme can be applied to all icons at once by doing: IconController : setGameTheme ( theme ) or local icons = IconController : getAllIcons () for _ , icon in pairs ( icons ) do icon : setTheme ( theme ) end For further details, visit the Icon docs. Here's some examples of custom themes you can create:","title":"Themes"},{"location":"projects/topbarplus/about/#roblox-mimic","text":"View local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, }","title":"Roblox Mimic"},{"location":"projects/topbarplus/about/#blue-gradient","text":"View local selectedColor = Color3 . fromRGB ( 0 , 170 , 255 ) local selectedColorDarker = Color3 . fromRGB ( 0 , 120 , 180 ) local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.1 , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ) --selectedColor, }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = selectedColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = selectedColor , }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"gradient\" ] = { selected = { Color = ColorSequence . new ( selectedColor , selectedColorDarker ), Rotation = 90 , }, }, } iconController : setGameTheme ( theme )","title":"Blue Gradient"},{"location":"projects/topbarplus/about/#rainbow-pop","text":"View local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"Rainbow Pop"},{"location":"projects/topbarplus/about/#mint","text":"by ViniDalvino View local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quart , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.35 , ImageColor3 = Color3 . fromRGB ( 0 , 255 , 200 ), }, deselected = { ImageTransparency = 0.35 , ImageColor3 = Color3 . fromRGB ( 15 , 15 , 15 ) }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 70 , 133 , 107 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 55 , 145 , 103 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, }","title":"Mint"},{"location":"projects/topbarplus/dropdown/","text":"Methods \u00b6 set \u00b6 dropdown : set ( setting , value ) Sets the specified setting to the given value. For example: dropdown : set ( \"backgroundColor\" , Color3 . fromRGB ( 100 , 100 , 100 )) update \u00b6 dropdown : update () Forces the dropdown to update colors and text alignment. If the dropdown is visible when this is called, the dropdown will be hidden. isOpen \u00b6 local bool = dropdown : isOpen () Returns a bool indicating if the dropdown is open or not. hide \u00b6 dropdown : hide () Hides the dropdown. show \u00b6 dropdown : show ( position ) Displays the dropdown at the passed Vector2 position. If position is not defined, the dropdown will appear automatically at the icon. createOption \u00b6 local updatedOption = dropdown : createOption ( option ) Creates an option menu based on the given option details, and returns the passed option table. removeOption \u00b6 dropdown : removeOption ( nameOrIndex ) Destroys an option with the given name or index. destroy \u00b6 dropdown : destroy () Destroys all instances, connections and signals associcated with the dropdown. Properties \u00b6 icon \u00b6 (read only) dropdown . objects The icon the dropdown is associated with. options \u00b6 (read only) dropdown . theme An array containing dictionaries that describe an option: Key Value Desc name String The option name that will appear in the dropdown. icon String (Optional) An image that appears to the left of the name clicked Function A function called when the option is pressed events Array An array of signals or events that bind to Icon:notify() to create a notification prompt to the right of the option name settings \u00b6 (read only) dropdown . settings A dictionary containing the dropdowns settings. Use dropdown:set() to change a setting. Key Value Desc canHidePlayerlist Bool Hides the playerlist if overlapping the dropdown canHideChat Bool Hides the chat if overlapping the dropdown chatDefaultDisplayOrder Int Forces the chats DisplayOrder to this value tweenSpeed Float How fast the dropdown appears/disppear easingDirection Enum.EasingDirection Affects how the dropdown appears/disppears easingStyle Enum.EasingStyle Affects how the dropdown appears/disppears backgroundColor Color3 The background color of dropdown options textColor Color3 The name color of dropdown options imageColor Color3 The icon color of dropdown options","title":"Dropdown"},{"location":"projects/topbarplus/dropdown/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/dropdown/#set","text":"dropdown : set ( setting , value ) Sets the specified setting to the given value. For example: dropdown : set ( \"backgroundColor\" , Color3 . fromRGB ( 100 , 100 , 100 ))","title":"set"},{"location":"projects/topbarplus/dropdown/#update","text":"dropdown : update () Forces the dropdown to update colors and text alignment. If the dropdown is visible when this is called, the dropdown will be hidden.","title":"update"},{"location":"projects/topbarplus/dropdown/#isopen","text":"local bool = dropdown : isOpen () Returns a bool indicating if the dropdown is open or not.","title":"isOpen"},{"location":"projects/topbarplus/dropdown/#hide","text":"dropdown : hide () Hides the dropdown.","title":"hide"},{"location":"projects/topbarplus/dropdown/#show","text":"dropdown : show ( position ) Displays the dropdown at the passed Vector2 position. If position is not defined, the dropdown will appear automatically at the icon.","title":"show"},{"location":"projects/topbarplus/dropdown/#createoption","text":"local updatedOption = dropdown : createOption ( option ) Creates an option menu based on the given option details, and returns the passed option table.","title":"createOption"},{"location":"projects/topbarplus/dropdown/#removeoption","text":"dropdown : removeOption ( nameOrIndex ) Destroys an option with the given name or index.","title":"removeOption"},{"location":"projects/topbarplus/dropdown/#destroy","text":"dropdown : destroy () Destroys all instances, connections and signals associcated with the dropdown.","title":"destroy"},{"location":"projects/topbarplus/dropdown/#properties","text":"","title":"Properties"},{"location":"projects/topbarplus/dropdown/#icon","text":"(read only) dropdown . objects The icon the dropdown is associated with.","title":"icon"},{"location":"projects/topbarplus/dropdown/#options","text":"(read only) dropdown . theme An array containing dictionaries that describe an option: Key Value Desc name String The option name that will appear in the dropdown. icon String (Optional) An image that appears to the left of the name clicked Function A function called when the option is pressed events Array An array of signals or events that bind to Icon:notify() to create a notification prompt to the right of the option name","title":"options"},{"location":"projects/topbarplus/dropdown/#settings","text":"(read only) dropdown . settings A dictionary containing the dropdowns settings. Use dropdown:set() to change a setting. Key Value Desc canHidePlayerlist Bool Hides the playerlist if overlapping the dropdown canHideChat Bool Hides the chat if overlapping the dropdown chatDefaultDisplayOrder Int Forces the chats DisplayOrder to this value tweenSpeed Float How fast the dropdown appears/disppear easingDirection Enum.EasingDirection Affects how the dropdown appears/disppears easingStyle Enum.EasingStyle Affects how the dropdown appears/disppears backgroundColor Color3 The background color of dropdown options textColor Color3 The name color of dropdown options imageColor Color3 The icon color of dropdown options","title":"settings"},{"location":"projects/topbarplus/icon/","text":"Constructors \u00b6 new \u00b6 local icon = Icon . new ( name , imageId , order ) Constructs a new icon where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons. Methods \u00b6 setTip \u00b6 icon : setTip ( tip ) Sets a tip that is displayed when hovering over the icon. Setting a tip to nil or \"\" will remove the tip. setControllerTip \u00b6 icon : setControllerTip ( tip ) Overrides the normal tip, if the player is in controller mode. createDropdown \u00b6 local dropdown = icon : createDropdown ( options ) Creates a dropdown that will be shown when the icon is right-clicked or long-pressed on mobile. Returns the dropdown created. If there already is an icon.dropdown , icon:removeDropdown() will be called before creating a new one. See Dropdown.options for more details, and About for an example. removeDropdown \u00b6 icon : removeDropdown () Destroys and removes all references of icon.dropdown . setImage \u00b6 icon : setImage ( imageId ) Sets the icons image, where imageId can be an int representing an asset id (such as 4882428756 ), or a string representing an assets pathway (such as \"rbxasset://textures/ui/TopBar/chatOff.png\" ). setOrder \u00b6 icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons. setLeft \u00b6 icon : setLeft () Aligns the icon on the left-side of the topbar (this happens by default). The greater the order , the further rightward the icon will appear relative to other icons set-left. setMid \u00b6 icon : setMid () Aligns the icon in the middle of the topbar. The greater the order , the further rightward the icon will appear relative to other icons set-mid. setRight \u00b6 icon : setRight () Aligns the icon on the right-side of the topbar, next to the leaderboard/emotes/inventory toggle. The greater the order , the further rightward the icon will appear relative to other icons set-right. setImageSize \u00b6 icon : setImageSize ( width , height ) Sets the image size in pixels. Height will equal width if not specified. setEnabled \u00b6 icon : setEnabled ( bool ) Sets the icons visibility. setCellSize \u00b6 icon : setCellSize ( pixels ) Changes the container size of icon to be X pixels by Y pixels . Defaults to 32. setBaseZIndex \u00b6 icon : setBaseZIndex ( int ) Calculates the difference between the existing baseZIndex (i.e. the object.container.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference. setToggleMenu \u00b6 icon : setToggleMenu ( guiObject ) Info You must ensure the GuiObject has 'ResetOnSpawn' set to false , or that you are calling icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist. setToggleFunction \u00b6 icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the icon is selected and deselected. setHoverFunction \u00b6 icon : setHoverFunction ( hoverFunction ) A function that is called when the icon is highlighted and unhighlighted. The first argument passed is icon.hovering . setTheme \u00b6 icon : setTheme ( themeDetails ) Applies the specified theme to the icon. See icon.theme for details on creating a theme. disableStateOverlay \u00b6 icon : disableStateOverlay ( bool ) If set to true, disables the state overlay (the color and transparency changes when an icon is hovered over and pressed). applyThemeToObject \u00b6 icon : applyThemeToObject ( objectName , toggleStatus ) Used internally to apply the theme set to the object, in icon.objects , with the name passed. applyThemeToAllObjects \u00b6 icon : applyThemeToAllObjects () Used internally to apply the set theme to all objects. select \u00b6 icon : select () Selects the icon. deselect \u00b6 icon : deselect () Deselects the icon. notify \u00b6 icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to icon.deselected . clearNotifications \u00b6 icon : clearNotifications () Clears all notifications. destroy \u00b6 icon : destroy () Destroys all instances, connections and signals associcated with the icon. Events \u00b6 updated \u00b6 icon . updated Fired when the icon causes a position shift of other icons. icon . updated : Connect ( function () end ) selected \u00b6 icon . selected Fired when the icon is selected. icon . selected : Connect ( function () end ) deselected \u00b6 icon . deselected Fired when the icon is deselected. icon . deselected : Connect ( function () end ) endNotifications \u00b6 icon . endNotifications Fired when the icons notifcations are cleared. icon . endNotifications : Connect ( function () end ) Properties \u00b6 objects \u00b6 icon . objects A dictionary of instances that make up the icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text. gradient UIGradient The gradient used to make the icon look fancy. theme \u00b6 (read only) icon . theme A dictionary describing the icons theme. To change, use icon:setTheme() . Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) gradient ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, [ \"gradient\" ] = { selected = {}, deselected = {}, }, } toggleStatus \u00b6 icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". To change, use icon:select() and icon:deselect() . name \u00b6 icon . name The icon creation name. tip \u00b6 icon . tip The tip ( string ) shown when the icon is highlighted (mouse hovering over the icon or gamepad selection has the icon selected). controllerTip \u00b6 (read only) icon . controllerTip The controller tip that overrides the normal tip when the player is in controller mode. imageId \u00b6 (read only) icon . imageId The icons imageId. To change, use icon:setImage() . imageSize \u00b6 (read only) icon . imageSize A Vector2 representing the images size. To change, use icon:setImageSize() . Default: 20px order \u00b6 (read only) icon . order The icons order. This determines whether the icon comes before or after other icons. Defaults to 1 . To change, use icon:setOrder() . enabled \u00b6 (read only) icon . order A bool describing whether the icon is enabled or not. To change, use icon:setEnabled() . hovering \u00b6 (read only) icon . hovering A bool describing whether a mouse or controller is hovering over the icon. alignment \u00b6 (read only) icon . alignment A string describing the alignment of the icon, there are three alignments: left , mid , right totalNotifications \u00b6 (read only) icon . totalNotifications An int representing the amount of active notifications. toggleMenu \u00b6 (read only) icon . toggleFunction A GuiObject binded by icon:setToggleMenu() . toggleFunction \u00b6 (read only) icon . toggleFunction A custom function called during icon:select() and icon:deselect() . To change, use icon:setToggleFunction() . hoverFunction \u00b6 (read only) icon . hoverFunction A custom function called when the icon is highlighted or unhighlighted. To change, use icon:setHoverFunction() . deselectWhenOtherIconSelected \u00b6 icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"Icon"},{"location":"projects/topbarplus/icon/#constructors","text":"","title":"Constructors"},{"location":"projects/topbarplus/icon/#new","text":"local icon = Icon . new ( name , imageId , order ) Constructs a new icon where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons.","title":"new"},{"location":"projects/topbarplus/icon/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/icon/#settip","text":"icon : setTip ( tip ) Sets a tip that is displayed when hovering over the icon. Setting a tip to nil or \"\" will remove the tip.","title":"setTip"},{"location":"projects/topbarplus/icon/#setcontrollertip","text":"icon : setControllerTip ( tip ) Overrides the normal tip, if the player is in controller mode.","title":"setControllerTip"},{"location":"projects/topbarplus/icon/#createdropdown","text":"local dropdown = icon : createDropdown ( options ) Creates a dropdown that will be shown when the icon is right-clicked or long-pressed on mobile. Returns the dropdown created. If there already is an icon.dropdown , icon:removeDropdown() will be called before creating a new one. See Dropdown.options for more details, and About for an example.","title":"createDropdown"},{"location":"projects/topbarplus/icon/#removedropdown","text":"icon : removeDropdown () Destroys and removes all references of icon.dropdown .","title":"removeDropdown"},{"location":"projects/topbarplus/icon/#setimage","text":"icon : setImage ( imageId ) Sets the icons image, where imageId can be an int representing an asset id (such as 4882428756 ), or a string representing an assets pathway (such as \"rbxasset://textures/ui/TopBar/chatOff.png\" ).","title":"setImage"},{"location":"projects/topbarplus/icon/#setorder","text":"icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons.","title":"setOrder"},{"location":"projects/topbarplus/icon/#setleft","text":"icon : setLeft () Aligns the icon on the left-side of the topbar (this happens by default). The greater the order , the further rightward the icon will appear relative to other icons set-left.","title":"setLeft"},{"location":"projects/topbarplus/icon/#setmid","text":"icon : setMid () Aligns the icon in the middle of the topbar. The greater the order , the further rightward the icon will appear relative to other icons set-mid.","title":"setMid"},{"location":"projects/topbarplus/icon/#setright","text":"icon : setRight () Aligns the icon on the right-side of the topbar, next to the leaderboard/emotes/inventory toggle. The greater the order , the further rightward the icon will appear relative to other icons set-right.","title":"setRight"},{"location":"projects/topbarplus/icon/#setimagesize","text":"icon : setImageSize ( width , height ) Sets the image size in pixels. Height will equal width if not specified.","title":"setImageSize"},{"location":"projects/topbarplus/icon/#setenabled","text":"icon : setEnabled ( bool ) Sets the icons visibility.","title":"setEnabled"},{"location":"projects/topbarplus/icon/#setcellsize","text":"icon : setCellSize ( pixels ) Changes the container size of icon to be X pixels by Y pixels . Defaults to 32.","title":"setCellSize"},{"location":"projects/topbarplus/icon/#setbasezindex","text":"icon : setBaseZIndex ( int ) Calculates the difference between the existing baseZIndex (i.e. the object.container.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.","title":"setBaseZIndex"},{"location":"projects/topbarplus/icon/#settogglemenu","text":"icon : setToggleMenu ( guiObject ) Info You must ensure the GuiObject has 'ResetOnSpawn' set to false , or that you are calling icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist.","title":"setToggleMenu"},{"location":"projects/topbarplus/icon/#settogglefunction","text":"icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the icon is selected and deselected.","title":"setToggleFunction"},{"location":"projects/topbarplus/icon/#sethoverfunction","text":"icon : setHoverFunction ( hoverFunction ) A function that is called when the icon is highlighted and unhighlighted. The first argument passed is icon.hovering .","title":"setHoverFunction"},{"location":"projects/topbarplus/icon/#settheme","text":"icon : setTheme ( themeDetails ) Applies the specified theme to the icon. See icon.theme for details on creating a theme.","title":"setTheme"},{"location":"projects/topbarplus/icon/#disablestateoverlay","text":"icon : disableStateOverlay ( bool ) If set to true, disables the state overlay (the color and transparency changes when an icon is hovered over and pressed).","title":"disableStateOverlay"},{"location":"projects/topbarplus/icon/#applythemetoobject","text":"icon : applyThemeToObject ( objectName , toggleStatus ) Used internally to apply the theme set to the object, in icon.objects , with the name passed.","title":"applyThemeToObject"},{"location":"projects/topbarplus/icon/#applythemetoallobjects","text":"icon : applyThemeToAllObjects () Used internally to apply the set theme to all objects.","title":"applyThemeToAllObjects"},{"location":"projects/topbarplus/icon/#select","text":"icon : select () Selects the icon.","title":"select"},{"location":"projects/topbarplus/icon/#deselect","text":"icon : deselect () Deselects the icon.","title":"deselect"},{"location":"projects/topbarplus/icon/#notify","text":"icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to icon.deselected .","title":"notify"},{"location":"projects/topbarplus/icon/#clearnotifications","text":"icon : clearNotifications () Clears all notifications.","title":"clearNotifications"},{"location":"projects/topbarplus/icon/#destroy","text":"icon : destroy () Destroys all instances, connections and signals associcated with the icon.","title":"destroy"},{"location":"projects/topbarplus/icon/#events","text":"","title":"Events"},{"location":"projects/topbarplus/icon/#updated","text":"icon . updated Fired when the icon causes a position shift of other icons. icon . updated : Connect ( function () end )","title":"updated"},{"location":"projects/topbarplus/icon/#selected","text":"icon . selected Fired when the icon is selected. icon . selected : Connect ( function () end )","title":"selected"},{"location":"projects/topbarplus/icon/#deselected","text":"icon . deselected Fired when the icon is deselected. icon . deselected : Connect ( function () end )","title":"deselected"},{"location":"projects/topbarplus/icon/#endnotifications","text":"icon . endNotifications Fired when the icons notifcations are cleared. icon . endNotifications : Connect ( function () end )","title":"endNotifications"},{"location":"projects/topbarplus/icon/#properties","text":"","title":"Properties"},{"location":"projects/topbarplus/icon/#objects","text":"icon . objects A dictionary of instances that make up the icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text. gradient UIGradient The gradient used to make the icon look fancy.","title":"objects"},{"location":"projects/topbarplus/icon/#theme","text":"(read only) icon . theme A dictionary describing the icons theme. To change, use icon:setTheme() . Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) gradient ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, [ \"gradient\" ] = { selected = {}, deselected = {}, }, }","title":"theme"},{"location":"projects/topbarplus/icon/#togglestatus","text":"icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". To change, use icon:select() and icon:deselect() .","title":"toggleStatus"},{"location":"projects/topbarplus/icon/#name","text":"icon . name The icon creation name.","title":"name"},{"location":"projects/topbarplus/icon/#tip","text":"icon . tip The tip ( string ) shown when the icon is highlighted (mouse hovering over the icon or gamepad selection has the icon selected).","title":"tip"},{"location":"projects/topbarplus/icon/#controllertip","text":"(read only) icon . controllerTip The controller tip that overrides the normal tip when the player is in controller mode.","title":"controllerTip"},{"location":"projects/topbarplus/icon/#imageid","text":"(read only) icon . imageId The icons imageId. To change, use icon:setImage() .","title":"imageId"},{"location":"projects/topbarplus/icon/#imagesize","text":"(read only) icon . imageSize A Vector2 representing the images size. To change, use icon:setImageSize() . Default: 20px","title":"imageSize"},{"location":"projects/topbarplus/icon/#order","text":"(read only) icon . order The icons order. This determines whether the icon comes before or after other icons. Defaults to 1 . To change, use icon:setOrder() .","title":"order"},{"location":"projects/topbarplus/icon/#enabled","text":"(read only) icon . order A bool describing whether the icon is enabled or not. To change, use icon:setEnabled() .","title":"enabled"},{"location":"projects/topbarplus/icon/#hovering","text":"(read only) icon . hovering A bool describing whether a mouse or controller is hovering over the icon.","title":"hovering"},{"location":"projects/topbarplus/icon/#alignment","text":"(read only) icon . alignment A string describing the alignment of the icon, there are three alignments: left , mid , right","title":"alignment"},{"location":"projects/topbarplus/icon/#totalnotifications","text":"(read only) icon . totalNotifications An int representing the amount of active notifications.","title":"totalNotifications"},{"location":"projects/topbarplus/icon/#togglemenu","text":"(read only) icon . toggleFunction A GuiObject binded by icon:setToggleMenu() .","title":"toggleMenu"},{"location":"projects/topbarplus/icon/#togglefunction","text":"(read only) icon . toggleFunction A custom function called during icon:select() and icon:deselect() . To change, use icon:setToggleFunction() .","title":"toggleFunction"},{"location":"projects/topbarplus/icon/#hoverfunction","text":"(read only) icon . hoverFunction A custom function called when the icon is highlighted or unhighlighted. To change, use icon:setHoverFunction() .","title":"hoverFunction"},{"location":"projects/topbarplus/icon/#deselectwhenothericonselected","text":"icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"deselectWhenOtherIconSelected"},{"location":"projects/topbarplus/iconcontroller/","text":"Methods \u00b6 createIcon \u00b6 IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon, where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons, greater values being shifted rightward. setTopbarEnabled \u00b6 IconController : setTopbarEnabled ( bool , forceBool ) When set to false, hides all icons created with Topbar+. This can also be achieved by doing starterGui:SetCore(\"TopbarEnabled\", bool) . forceBool forces topbar into going into the passed bool state, this does only affect the topbar when in controller mode. If in controller mode and forceBool is false then it will make the topbar move into/out of the screen, instead of making the topbar invisible. forceBool defaults to true. enableControllerMode \u00b6 IconController : enableControllerMode ( bool ) Used internally to enable/disable controller mode; can be used to force the controller display for a client. createFakeChat \u00b6 IconController : createFakeChat ( theme ) Disables the default core chat icon, and creates and returns a new icon imitating it. The icon can be enabled and disabled by doing icon:setEnabled(bool) or StarterGui:SetCoreGuiEnabled(\"Chat\", bool) . removeFakeChat \u00b6 IconController : removeFakeChat () Destroys and removes references of the fake chat icon. setGameTheme \u00b6 IconController : setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons. setDisplayOrder \u00b6 IconController : setDisplayOrder ( int ) Changes the DisplayOrder of the Topbar+ ScreenGui to the given value. getIcon \u00b6 IconController : getIcon ( name ) Returns an icon of the corresponding name. getAllIcons \u00b6 IconController : getAllIcons () Returns an array containing every icon. removeIcon \u00b6 IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"IconController"},{"location":"projects/topbarplus/iconcontroller/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/iconcontroller/#createicon","text":"IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon, where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons, greater values being shifted rightward.","title":"createIcon"},{"location":"projects/topbarplus/iconcontroller/#settopbarenabled","text":"IconController : setTopbarEnabled ( bool , forceBool ) When set to false, hides all icons created with Topbar+. This can also be achieved by doing starterGui:SetCore(\"TopbarEnabled\", bool) . forceBool forces topbar into going into the passed bool state, this does only affect the topbar when in controller mode. If in controller mode and forceBool is false then it will make the topbar move into/out of the screen, instead of making the topbar invisible. forceBool defaults to true.","title":"setTopbarEnabled"},{"location":"projects/topbarplus/iconcontroller/#enablecontrollermode","text":"IconController : enableControllerMode ( bool ) Used internally to enable/disable controller mode; can be used to force the controller display for a client.","title":"enableControllerMode"},{"location":"projects/topbarplus/iconcontroller/#createfakechat","text":"IconController : createFakeChat ( theme ) Disables the default core chat icon, and creates and returns a new icon imitating it. The icon can be enabled and disabled by doing icon:setEnabled(bool) or StarterGui:SetCoreGuiEnabled(\"Chat\", bool) .","title":"createFakeChat"},{"location":"projects/topbarplus/iconcontroller/#removefakechat","text":"IconController : removeFakeChat () Destroys and removes references of the fake chat icon.","title":"removeFakeChat"},{"location":"projects/topbarplus/iconcontroller/#setgametheme","text":"IconController : setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons.","title":"setGameTheme"},{"location":"projects/topbarplus/iconcontroller/#setdisplayorder","text":"IconController : setDisplayOrder ( int ) Changes the DisplayOrder of the Topbar+ ScreenGui to the given value.","title":"setDisplayOrder"},{"location":"projects/topbarplus/iconcontroller/#geticon","text":"IconController : getIcon ( name ) Returns an icon of the corresponding name.","title":"getIcon"},{"location":"projects/topbarplus/iconcontroller/#getallicons","text":"IconController : getAllIcons () Returns an array containing every icon.","title":"getAllIcons"},{"location":"projects/topbarplus/iconcontroller/#removeicon","text":"IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"removeIcon"},{"location":"projects/zoneplus/about/","text":"Zone+ is a lightweight application that utilises regions and raycasting to efficiently determine players within an area. Resources \u00b6 Repository MainModule Playground Thread TypeScript Port by DanzLua Collaborate \u00b6 Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository. Referencing \u00b6 After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Example (server-sided) \u00b6 In a Script within ServerScriptService : local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone zone . playerAdded : Connect ( function ( player ) -- Fires when a player enters the zone print ( player . Name .. \" entered!\" ) end ) zone . playerRemoving : Connect ( function ( player ) -- Fires when a player exits the zone print ( player . Name .. \" left!\" ) end ) zone : initLoop () -- Initiates loop (default 0.5) which enables the events to work Example (client-sided) \u00b6 In a Script within ServerScriptService : require ( 4664437268 ) -- Initiate Zone+ Then in a LocalScript within StarterPlayerScripts : local ZonePlus = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ) local ZoneService = require ( ZonePlus . ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local localPlayer = game : GetService ( \"Players\" ). LocalPlayer local isClientInZone = zone : getPlayer ( localPlayer ) -- Checks whether the local player is within the zone zone . playerAdded : Connect ( function () -- Fires when the localPlayer enters the zone print ( localPlayer . Name .. \" entered!\" ) end ) zone . playerRemoving : Connect ( function () -- Fires when the localPlayer exits the zone print ( localPlayer . Name .. \" left!\" ) end ) zone : initClientLoop () -- Initiates loop (default 0.5) which *only* checks for the local player, enabling events to work Info It's important you use methods such as zone:getPlayer(localPlayer) and zone:initClientLoop() (instead of zone:getPlayers() and zone:initLoop() ) if you only intend to check for the local player. Uses \u00b6 For coded examples, visit the Zone+ Playground. Safe Zone (1) \u00b6 Setup a zone with an arbitrary space (using the additionalHeight parameter), retrieve all players within the zone at frequent intervals, and apply or remove a forcefield accordingly. This example also generates 2000 random parts as a visual representation of additionalHeight . Safe Zone (2) \u00b6 Detect and apply a forcefield to players within an uncancollided red zone using the playerAdded and playerRemoving events. Coin Spawner \u00b6 Randomly generate coins a few studs above any surface within the zone. Voting Pads \u00b6 Utilise zones to determine the amount of players on a particular pad. Ambient Areas \u00b6 Play sounds within specific areas. Note This example is client-sided and found within StarterPlayerScripts in the Topbar+ Playground.","title":"About"},{"location":"projects/zoneplus/about/#resources","text":"Repository MainModule Playground Thread TypeScript Port by DanzLua","title":"Resources"},{"location":"projects/zoneplus/about/#collaborate","text":"Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository.","title":"Collaborate"},{"location":"projects/zoneplus/about/#referencing","text":"After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\")","title":"Referencing"},{"location":"projects/zoneplus/about/#example-server-sided","text":"In a Script within ServerScriptService : local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone zone . playerAdded : Connect ( function ( player ) -- Fires when a player enters the zone print ( player . Name .. \" entered!\" ) end ) zone . playerRemoving : Connect ( function ( player ) -- Fires when a player exits the zone print ( player . Name .. \" left!\" ) end ) zone : initLoop () -- Initiates loop (default 0.5) which enables the events to work","title":"Example (server-sided)"},{"location":"projects/zoneplus/about/#example-client-sided","text":"In a Script within ServerScriptService : require ( 4664437268 ) -- Initiate Zone+ Then in a LocalScript within StarterPlayerScripts : local ZonePlus = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ) local ZoneService = require ( ZonePlus . ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local localPlayer = game : GetService ( \"Players\" ). LocalPlayer local isClientInZone = zone : getPlayer ( localPlayer ) -- Checks whether the local player is within the zone zone . playerAdded : Connect ( function () -- Fires when the localPlayer enters the zone print ( localPlayer . Name .. \" entered!\" ) end ) zone . playerRemoving : Connect ( function () -- Fires when the localPlayer exits the zone print ( localPlayer . Name .. \" left!\" ) end ) zone : initClientLoop () -- Initiates loop (default 0.5) which *only* checks for the local player, enabling events to work Info It's important you use methods such as zone:getPlayer(localPlayer) and zone:initClientLoop() (instead of zone:getPlayers() and zone:initLoop() ) if you only intend to check for the local player.","title":"Example (client-sided)"},{"location":"projects/zoneplus/about/#uses","text":"For coded examples, visit the Zone+ Playground.","title":"Uses"},{"location":"projects/zoneplus/about/#safe-zone-1","text":"Setup a zone with an arbitrary space (using the additionalHeight parameter), retrieve all players within the zone at frequent intervals, and apply or remove a forcefield accordingly. This example also generates 2000 random parts as a visual representation of additionalHeight .","title":"Safe Zone (1)"},{"location":"projects/zoneplus/about/#safe-zone-2","text":"Detect and apply a forcefield to players within an uncancollided red zone using the playerAdded and playerRemoving events.","title":"Safe Zone (2)"},{"location":"projects/zoneplus/about/#coin-spawner","text":"Randomly generate coins a few studs above any surface within the zone.","title":"Coin Spawner"},{"location":"projects/zoneplus/about/#voting-pads","text":"Utilise zones to determine the amount of players on a particular pad.","title":"Voting Pads"},{"location":"projects/zoneplus/about/#ambient-areas","text":"Play sounds within specific areas. Note This example is client-sided and found within StarterPlayerScripts in the Topbar+ Playground.","title":"Ambient Areas"},{"location":"projects/zoneplus/zone/","text":"Constructors \u00b6 new \u00b6 local zone = Zone . new ( group , additionalHeight ) Constructs a new zone where group is an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 . Methods \u00b6 update \u00b6 zone : update () Reconstructs the region and clusters forming the zone. Zones are dynamic (they listen for changes in children, such as the adding or removing of a part, and the resizing and positioning of these children), therefore will update automatically for you. getPlayersInRegion \u00b6 local players = zone : getPlayersInRegion () Returns an array of players within the zones region (the rough area surrounding the zone). getPlayer \u00b6 local hitPart , intersection = zone : getPlayer ( player ) If within the zone, returns the group part the player is standing on or within (a BasePart ) and the intersection point (a Vector3 ), otherwise false . getPlayers \u00b6 local players = zone : getPlayers () Returns an array of players within the zone. initLoop \u00b6 zone : initLoop ( interval ) Initiates a loop which calls zone:getPlayers() every x second, defaults to 0.5 . initClientLoop \u00b6 zone : initClientLoop ( interval ) Initiates a loop which calls zone:getPlayer(localPlayer) every x second, defaults to 0.5 . endLoop \u00b6 zone : endLoop () Cancels any loop created with zone:initLoop() . getRandomPoint \u00b6 local randomCFrame , hitPart , hitIntersection = zone : getRandomPoint () Returns a random point ( a CFrame ), within the zone, along with the group part (a BasePart ) directly below, and its intersection vector relative to the point (a Vector3 ). destroy \u00b6 zone : destroy () Destroys all instances, connections and signals associcated with the zone, and ends any loop running. Events \u00b6 playerAdded \u00b6 zone . playerAdded Fired when a player enters the zone. Info zone:getPlayer(player) (or zone:getPlayers() which calls this) must be called at frequent intervals, or zone:initLoop() (or zone:initClientLoop() for the local player) once (which calls this repeatedly), for this event to function. zone . playerAdded : Connect ( function ( player ) end ) playerRemoving \u00b6 zone . playerRemoving Fired when a player leaves the zone. Info zone:getPlayer(player) (or zone:getPlayers() which calls this) must be called at frequent intervals, or zone:initLoop() (or zone:initClientLoop() for the local player) once (which calls this repeatedly), for this event to function. zone . playerRemoving : Connect ( function ( player ) end ) updated \u00b6 zone . updated Fired when the zone updates (i.e. a group part is changed, such as its position or size, or a part is added or removed from the group). zone . updated : Connect ( function () end ) Properties \u00b6 autoUpdate \u00b6 zone . autoUpdate A bool deciding whether the zone should automatically update when its group parts change. respectUpdateQueue \u00b6 zone . respectUpdateQueue A bool that when set to true delays the automatic updating of the zone, preventing multiple calls within a short time period. group \u00b6 {read-only} zone . group The container instance originally passed when constructing the zone. groupParts \u00b6 {read-only} zone . groupParts An array of all BaseParts within group . clusters \u00b6 {read-only} zone . clusters An array of clusters. Cluster A dictionary describing a collection of touching parts within the zone. Key Value Desc parts Array A collection of touching parts that form the cluster region Region3 A region formed from the clusters parts. volume Number The volume calculated from region.Size additionalHeight \u00b6 {read-only} zone . additionalHeight The number originally passed when constructing the zone, or 0. Describes how far to extend the zone in the global Y direction. region \u00b6 {read-only} zone . region A Region3 formed from groupParts . boundMin \u00b6 {read-only} zone . boundMin A Vector3 used to form region , describing the zones minimum point. boundMax \u00b6 {read-only} zone . boundMax A Vector3 used to form region , describing the zones maximum point. regionHeight \u00b6 {read-only} zone . regionHeight A number describing the Y-value difference between boundMin and boundMax .","title":"Zone"},{"location":"projects/zoneplus/zone/#constructors","text":"","title":"Constructors"},{"location":"projects/zoneplus/zone/#new","text":"local zone = Zone . new ( group , additionalHeight ) Constructs a new zone where group is an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 .","title":"new"},{"location":"projects/zoneplus/zone/#methods","text":"","title":"Methods"},{"location":"projects/zoneplus/zone/#update","text":"zone : update () Reconstructs the region and clusters forming the zone. Zones are dynamic (they listen for changes in children, such as the adding or removing of a part, and the resizing and positioning of these children), therefore will update automatically for you.","title":"update"},{"location":"projects/zoneplus/zone/#getplayersinregion","text":"local players = zone : getPlayersInRegion () Returns an array of players within the zones region (the rough area surrounding the zone).","title":"getPlayersInRegion"},{"location":"projects/zoneplus/zone/#getplayer","text":"local hitPart , intersection = zone : getPlayer ( player ) If within the zone, returns the group part the player is standing on or within (a BasePart ) and the intersection point (a Vector3 ), otherwise false .","title":"getPlayer"},{"location":"projects/zoneplus/zone/#getplayers","text":"local players = zone : getPlayers () Returns an array of players within the zone.","title":"getPlayers"},{"location":"projects/zoneplus/zone/#initloop","text":"zone : initLoop ( interval ) Initiates a loop which calls zone:getPlayers() every x second, defaults to 0.5 .","title":"initLoop"},{"location":"projects/zoneplus/zone/#initclientloop","text":"zone : initClientLoop ( interval ) Initiates a loop which calls zone:getPlayer(localPlayer) every x second, defaults to 0.5 .","title":"initClientLoop"},{"location":"projects/zoneplus/zone/#endloop","text":"zone : endLoop () Cancels any loop created with zone:initLoop() .","title":"endLoop"},{"location":"projects/zoneplus/zone/#getrandompoint","text":"local randomCFrame , hitPart , hitIntersection = zone : getRandomPoint () Returns a random point ( a CFrame ), within the zone, along with the group part (a BasePart ) directly below, and its intersection vector relative to the point (a Vector3 ).","title":"getRandomPoint"},{"location":"projects/zoneplus/zone/#destroy","text":"zone : destroy () Destroys all instances, connections and signals associcated with the zone, and ends any loop running.","title":"destroy"},{"location":"projects/zoneplus/zone/#events","text":"","title":"Events"},{"location":"projects/zoneplus/zone/#playeradded","text":"zone . playerAdded Fired when a player enters the zone. Info zone:getPlayer(player) (or zone:getPlayers() which calls this) must be called at frequent intervals, or zone:initLoop() (or zone:initClientLoop() for the local player) once (which calls this repeatedly), for this event to function. zone . playerAdded : Connect ( function ( player ) end )","title":"playerAdded"},{"location":"projects/zoneplus/zone/#playerremoving","text":"zone . playerRemoving Fired when a player leaves the zone. Info zone:getPlayer(player) (or zone:getPlayers() which calls this) must be called at frequent intervals, or zone:initLoop() (or zone:initClientLoop() for the local player) once (which calls this repeatedly), for this event to function. zone . playerRemoving : Connect ( function ( player ) end )","title":"playerRemoving"},{"location":"projects/zoneplus/zone/#updated","text":"zone . updated Fired when the zone updates (i.e. a group part is changed, such as its position or size, or a part is added or removed from the group). zone . updated : Connect ( function () end )","title":"updated"},{"location":"projects/zoneplus/zone/#properties","text":"","title":"Properties"},{"location":"projects/zoneplus/zone/#autoupdate","text":"zone . autoUpdate A bool deciding whether the zone should automatically update when its group parts change.","title":"autoUpdate"},{"location":"projects/zoneplus/zone/#respectupdatequeue","text":"zone . respectUpdateQueue A bool that when set to true delays the automatic updating of the zone, preventing multiple calls within a short time period.","title":"respectUpdateQueue"},{"location":"projects/zoneplus/zone/#group","text":"{read-only} zone . group The container instance originally passed when constructing the zone.","title":"group"},{"location":"projects/zoneplus/zone/#groupparts","text":"{read-only} zone . groupParts An array of all BaseParts within group .","title":"groupParts"},{"location":"projects/zoneplus/zone/#clusters","text":"{read-only} zone . clusters An array of clusters. Cluster A dictionary describing a collection of touching parts within the zone. Key Value Desc parts Array A collection of touching parts that form the cluster region Region3 A region formed from the clusters parts. volume Number The volume calculated from region.Size","title":"clusters"},{"location":"projects/zoneplus/zone/#additionalheight","text":"{read-only} zone . additionalHeight The number originally passed when constructing the zone, or 0. Describes how far to extend the zone in the global Y direction.","title":"additionalHeight"},{"location":"projects/zoneplus/zone/#region","text":"{read-only} zone . region A Region3 formed from groupParts .","title":"region"},{"location":"projects/zoneplus/zone/#boundmin","text":"{read-only} zone . boundMin A Vector3 used to form region , describing the zones minimum point.","title":"boundMin"},{"location":"projects/zoneplus/zone/#boundmax","text":"{read-only} zone . boundMax A Vector3 used to form region , describing the zones maximum point.","title":"boundMax"},{"location":"projects/zoneplus/zone/#regionheight","text":"{read-only} zone . regionHeight A number describing the Y-value difference between boundMin and boundMax .","title":"regionHeight"},{"location":"projects/zoneplus/zoneservice/","text":"Methods \u00b6 createZone \u00b6 local zone = ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone, where name is a unique string identifying the zone, group , an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 . getZone \u00b6 local zone = ZoneService : getZone ( name ) Returns a zone of the corresponding name. getAllZones \u00b6 local zones = ZoneService : getAllZones () Returns an array containing every zone. removeZone \u00b6 ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"ZoneService"},{"location":"projects/zoneplus/zoneservice/#methods","text":"","title":"Methods"},{"location":"projects/zoneplus/zoneservice/#createzone","text":"local zone = ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone, where name is a unique string identifying the zone, group , an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 .","title":"createZone"},{"location":"projects/zoneplus/zoneservice/#getzone","text":"local zone = ZoneService : getZone ( name ) Returns a zone of the corresponding name.","title":"getZone"},{"location":"projects/zoneplus/zoneservice/#getallzones","text":"local zones = ZoneService : getAllZones () Returns an array containing every zone.","title":"getAllZones"},{"location":"projects/zoneplus/zoneservice/#removezone","text":"ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"removeZone"}]}